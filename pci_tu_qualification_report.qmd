---
title: "PCI AAV8 TU qualification"
author: "Joseph Oddy"
date: "02-April-2025"
lightbox: auto
format:
  html:
    echo: false
    warning: false
    theme: flatly
    mermaid:
      theme: neutral
    page-layout: article
    self-contained: true
    code-line-numbers: true
    code-block-bg: true
    code-block-border-left: "#30BBF0"
    code-copy: true
    code-link: true
    code-fold: true
    code-tools:
      source: true
      toggle: false
      caption: none
    fig-align: center
    fig-height: 5
    fig-width: 8
    fig-responsive: true
    fig-dpi: 150
    fig-cap-location: top
    number-depth: 2
    toc: true
    toc-depth: 3
    smooth-scroll: true
    embed-resources: true
---

```{r}
#| label: setup

library(tidyverse)
library(readxl)
library(aqua)
library(flextable)

knitr::knit_hooks$set(
  pngquant = knitr::hook_pngquant,
  optipng = knitr::hook_optipng
)
knitr::opts_chunk$set(
  dev = "ragg_png",
  pngquant = "--speed=1 --quality=100 --skip-if-larger --strip --force",
  optipng = "-zc9 -zm8-9 -zs0-1 -f0,5 -clobber -fix -force"
)

```


# PCI AAV8 TU Assay Qualification

This document describes the qualification of the AAV8 TU assay. The AAV8 TU assay is a cell-based assay that measures the transducing units (TU) of AAV8 vectors in HeLa cells.

Parameters assessed:

- Specificity: 50-200% recovery of spiked sample, -ve ctrl < LoD
- Accuracy (relative to TU dev runs): 50-200% (**FIO**)
- Precision (CV):
  - Repeatability <= 40%
  - Intermediate Precision <= 50%
- Linearity (R^2): >= 0.9
- LOQ/LLOD

#### Note:

Run was excluded as a term for the adjusted R2 analysis, as it was invariable across samples.

## Analysis:

-   The analysis is performed in R using the `tidyverse` and `aqua` packages.

## Parameters:

-   **Accuracy:** Relative recovery rate within 50-200%. Mean sample TU/mL within 50-200% recovery of mean sample TU/mL from previous TU development runs.
-   **Precision**
    -   **Repeatability:** CV \< 40% between dilution series of a single plate (n=4)
    -   **Intermediate Precision:** CV \< 50% between same dilutions across all plates (n=4, 1/plate). Data obtained by taking each plate's average TU/mL from the separate dilution series.
-   **Specificity:** Using negative controls only, \< 3% GFP+.
-   **Linearity:** R^2^ \> 0.9 for AAV8 dilution series. Using 1.6X dilution series.
-   **LoD:** Lowest dilutional TU/mL where %GFP+ \> average negative control GFP+ + 3.3\*sd(negative control GFP+)
-   **LoQ:** Lowest dilutional TU/mL where %GFP+ \> average negative control GFP+ + 10\*sd(negative control GFP+) and meets precision CV% criteria.
-   **Robustness:** N/A

:::{.callout-note}
## Calculating TU/mL when the data is lognormal-ish

We can use an MOI correction based on the poisson distribution. Instead of GFP+ we can use `-log(1 - GFP+)`. 
:::


```{r}
#| label: read_data

tu_data <- read_excel("data/EX2350, 2351, 2352, 2388 - TU AAV8 Quali Data Collation for Dragos (data re-formatted).xlsx") |>
  mutate(
    across(Run:Dilution, as.factor),
    across(LiveCellsPerc:GFPpercent, ~ .x/100)
  ) |> 
  select(!c(`...13`, `...15`, `Operator 1:`, `Omaymah Belhaj-Fahsi`)) |> 
  filter(!if_all(everything(), is.na)) |> 
  filter(LiveCells > 1000) |> 
  filter(LiveCellsPerc > 0.7)
```


# Qualification

## Accuracy

The accuracy of an analytical procedure expresses the closeness of agreement between the value which is accepted either as a conventional true value or as an accepted reference value and the value measured.

* AAV8-GFP TFF2 sample: expected ~ 1.38e7 TU/mL

```{r}
#| label: tbl-accuracy-elisa
#| tbl-cap: "Accuracy for each dilution"

tu_data |>
  filter(str_detect(Sample, "AAV8-GFP spiked in TFF2 buffer")) |>
  select(Sample, Dilution, TU_ml_adj) |>
  group_by(Sample, Dilution) |>
  summarise(
    mean = scales::percent(mean(TU_ml_adj) / 1.38e+7)
  ) |>
  set_names(c("Sample", "Dilution Factor", "Recovery vs. known sample titre")) |>
  flextable() |>
  merge_v(j = 1) |>
  theme_box() |>
  autofit() |>
  align(align = "center", part = "all")

all_acc <- scales::percent(tu_data |>
  filter(str_detect(Sample, "AAV8-GFP spiked in TFF2 buffer")) |>
  select(Sample, Dilution, TU_ml_adj) |>
  group_by(Sample, Dilution) |>
  summarise(
    mean = mean(TU_ml_adj) / 1.38e+7
  ) |>
  pull(mean) |>
  mean())

spec_acc <- scales::percent(tu_data |>
  filter(str_detect(Sample, "AAV8-GFP spiked in TFF2 buffer"), Dilution != 625) |>
  select(Sample, Dilution, TU_ml_adj) |>
  group_by(Sample, Dilution) |>
  summarise(
    mean = mean(TU_ml_adj) / 1.38e+7
  ) |>
  pull(mean) |>
  mean())
```

The overall accuracy/recovery is `r all_acc`. Excluding the 1:625 dilution it is `r spec_acc`.

## Specificity

Graph below (@fig-specificity-samples) shows the %GFP+ cells identified across all control samples, which include a full mix of GFP± and L/D± dyes.

```{r}
#| label: fig-specificity-samples
#| dev: "ragg_png"
#| fig-cap: "AAV8 TU assay negative controls."

tu_data |>
  filter(str_detect(Sample, "^GFP")) |>
  mutate(row = row_number()) |>
  ggplot(
    aes(x = row, y = GFPpercent, colour = paste0("Run ", Run, " Op ", Operator), shape = str_replace(Sample, " ", "\n "))
  ) +
  theme_catapult() +
  theme(legend.box = "vertical") +
  scale_colour_catapult_d(end = 0.75) +
  geom_point(size = 3) +
  scale_y_continuous(limits  = c(0, 1), labels = scales::percent) +
  guides(
    shape = guide_legend(nrow = 1, override.aes = list(size = 5, linewidth = 2)),
    colour = guide_legend(nrow = 1)
  ) +
  labs(
    x = "Sample #",
    y = "%GFP +",
    colour = "Plate",
    shape = "Control\nSample"
  )

```

GFP+ samples derived from the 1:5 dilution of the control sample show strong positive signal when compared to GFP- samples. Factoring in the L/D+ signal introduces some extra variability for the GFP+ samples but doesn't affect the "noise" floor. Let's get an estimate of the noise floor and LoD/LLoQ.

## LoD / LoQ

```{r}
#| label: tbl-lod-calculation
#| tbl-cap: "AAV8 TU assay LoD/LLoQ Estimates. Noise threshold estimate based on GFP- L/D+ samples. LoD estimate at 3.3 SDs above noise, and LLoQ estimate at 10 SDs above noise threshold."

LL_data <- tu_data |>
  filter(Sample == "GFP- L/D+" | (Sample == "AAV8-GFP-1.6X" & Dilution == "1759")) |>
  group_by(Run, Operator, Sample) |>
  summarise(
    Noise = mean(GFPpercent),
    Var = var(GFPpercent)
  ) |>
  group_by(Sample) |>
  summarise(
    avg = mean(Noise),
    uncertainty = sqrt(sum(Var))/4
  )

LL_data[1, 2] <- LL_data[2, 2] # swap average noise for neg control, but keeping uncertainty from lowest dilution sample

LL_data[2, ] |> # plan says use blanks for all tho so f it we're not using the dilution uncertainty thing. Use LL_data[-2, ] to switch to uncertainty estimate from most dilute sample.
  mutate(
    Noise = paste0(scales::percent(avg, accuracy = 0.1), " ±", scales::percent(uncertainty, accuracy = 0.1)),
    LOD = scales::percent(avg + 3.3 * uncertainty, accuracy = 0.1),
    LOQ = scales::percent(avg + 10 * uncertainty, accuracy = 0.1),
    .keep = "none"
  ) |>
  set_names(c("Noise Threshold Estimation", "LoD", "LLoQ")) |>
  flextable() |>
  theme_box() |>
  autofit()

# LLoQ is now 2.0 instead of 2.7% GFP+ cells. 

```

The LLoQ is at 1.1%. The noise floor and LoD/LLoQ is estimated using the GFP- L/D+ samples and their associated variance.
 

## Linearity

```{r}
#| label: fig-linearity
#| dev: "ragg_png"
#| fig-cap: "Linearity plot of all data. Robust linear model fit for data above LoQ %GFP+ cells shown as black trendline."

tu_data |>
  filter(
    Sample == "AAV8-GFP-1.6X"
  ) |>
  ggplot(
    aes(x = as.numeric(as.character(Dilution)), y = GFPpercent, colour = paste0("Run ", Run, " Op ", Operator))
  ) + 
  geom_smooth(data = ~ filter(.x, GFPpercent > 0.02), method = robustbase::lmrob, se = FALSE, colour = "darkred", linewidth = 2) +
  geom_point(size = 3, alpha = 2/3) +
#  scale_x_log10(breaks = c(5, 0.5, 0.31, 0.2, 0.12, 0.08, 0.05, 0.03, 0.02, 0.01)) +
  scale_x_log10(breaks = c(10, 16, 26, 41, 66, 105, 168, 268, 429, 687, 1100, 1759)) +
  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) +
  theme_catapult() +
  scale_colour_catapult_d(end = 0.75) +
  labs(
    x = "Dilution Factor (log scale)",
    y = "%GFP+ Cells",
    colour = "Plate"
  )

```


```{r}
#| label: tbl-linearity-table
#| tbl-cap: "Linearity per dilution range."

tu_data |>
  filter(
    Sample == "AAV8-GFP-1.6X"
  ) |>
  group_by(Run, Operator) |>
  mutate(
    Dilution = as.numeric(as.character(Dilution))
  ) |>
  nest() |>
  mutate(
    rsq_16_1759 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_1100 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_687 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_429 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_268  = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_168 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_105 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_66 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 105, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared")),,
    rsq_16_41 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution), data = filter(x, !Dilution %in% c(10, 66, 105, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("r.squared"))
  ) |>
  mutate(
    Plate = paste0("Run ", Run, " Op ", Operator)
  ) |>
  ungroup() |>
  select(-Run, -Operator, -data) |>
  relocate(Plate, .before = 1) |>
  mutate(
    across(where(is.numeric), ~ round(.x, 3))
  ) |>
  set_names(c("Plate", "1:16 - 1:1759", "1:16 - 1:1100", "1:16 - 1:687", "1:16 - 1:429", "1:16 - 1:268", "1:16 - 1:168", "1:16 - 1:105", "1:16 - 1:66", "1:16 - 1:41")) |>
  pivot_longer(
    cols = 2:last_col(),
    names_to = "Range",
    values_to = "R-squared"
  ) |>
  flextable() |>
  theme_box() |>
  merge_v(1) |>
  bold(j = 1) |>
  autofit()

# N.B> Only one level for run, so that must be removed from the model
  
  
tu_data |>
  filter(
    Sample == "AAV8-GFP-1.6X"
  ) |>
  mutate(
    Dilution = as.numeric(as.character(Dilution))
  ) |>
  nest() |>
  mutate(
    rsq_16_1759 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10))) |> summary.lm() |> magrittr::extract2("r.squared")),
    rsq_16_1100 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_687 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_429 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_268  = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_168 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_105 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),
    rsq_16_66 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 105, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared")),,
    rsq_16_41 = map_dbl(data, \(x) lm(GFPpercent ~ log(Dilution) + Operator, data = filter(x, !Dilution %in% c(10, 66, 105, 168, 268, 429, 687, 1100, 1759))) |> summary.lm() |> magrittr::extract2("adj.r.squared"))
  ) |> 
  select(-data) |>
  mutate(Plate = "Average adj. R-squared") |>
  relocate(Plate, .before = 1) |>
  mutate(
    across(where(is.numeric), ~ round(.x, 3))
  ) |>
  set_names(c("Plate", "1:16 - 1:1759", "1:16 - 1:1100", "1:16 - 1:687", "1:16 - 1:429", "1:16 - 1:268", "1:16 - 1:168", "1:16 - 1:105", "1:16 - 1:66", "1:16 - 1:41")) |>
  pivot_longer(
    cols = 2:last_col(),
    names_to = "Range",
    values_to = "R-squared"
  ) |>
  flextable() |>
  theme_box() |>
  merge_v(1) |>
  bold(j = 1) |>
  autofit()
```

1:16 - 1:168 dilution range passes the acceptance criteria.


```{r}
#| label: tbl-range-calc
#| tbl-cap: "%GFP+ average estimate for each dilution step."

WR_data <- tu_data |>
  filter(Sample == "AAV8-GFP-1.6X") |>
  group_by(Run, Operator, Dilution, Sample) |>
  summarise(
    Noise = mean(GFPpercent),
    Var = var(GFPpercent)
  ) |>
  group_by(Dilution) |>
  summarise(
    avg = mean(Noise),
    uncertainty = sqrt(sum(Var))/3
  )

WR_data |>
  mutate(
    Dilution = paste0("1:", Dilution),
    `%GFP+` = paste0(scales::percent(avg, accuracy = 0.1), "  ±", scales::percent(uncertainty, accuracy = 0.1)),
    .keep = "none"
  ) |>
  flextable() |>
  bold(j = 1) |>
  theme_box() |>
  autofit()
  
```

1:16 - 1:168 corresponds to an average GFP+% of between 5.1% (±0.1) - 33.6% (±1.2) for the linear working range.

## Precision

We'll highlight the linear working range in the plots (5.1% - 33.6%).

```{r}
#| label: fig-precision-AAV8
#| dev: "ragg_png"
#| fig-cap: "AAV8 TU assay repeatability. CVs in large yellow font, average GFP+ cells% above in white."

# Run 2 operator 1 getting NAs

tu_data |>
  filter(
    Sample == "AAV8-GFP"
  ) |>
  group_by(Run, Operator, Dilution) |>
  summarise(
    CV = DescTools::CoefVar(TU_ml_adj),
    GFP = mean(GFPpercent)
  ) |>
  ggplot(
    aes(x = Dilution, y = paste0("Run ", Run, " Op ", Operator), fill = CV)
  ) + 
  geom_tile() +
  theme_catapult() +
  theme(axis.title.y = element_blank()) +
  scale_fill_catapult_c(option = "B", end = 0.8, breaks = c(0, 0.1, 0.2, 0.3, 0.4), labels = scales::percent, limits = c(0, 0.45), legend_width = 16) +
  geom_label(aes(label = scales::percent(CV, accuracy = 0.1)), colour = "gold", fontface = "bold", size = 5) +
  geom_label(aes(label = paste(scales::percent(GFP, accuracy = 0.1), " GFP+")), colour = "white", size = 3.5, position = position_nudge(x = 0, y = 0.3)) +
  labs(
    x = "Dilution",
    y = "Run/Operator",
    fill = "TU/mL CV (%)"
  )

```

1:25 and 1:125 are the dilutions that are consistently within the presumed working range of the assay. 

```{r}
#| label: tbl-intermediate-precision
#| tbl-cap: "AAV8 TU assay intermediate precision."

tu_data |>
  filter(
    Sample == "AAV8-GFP"
  ) |>
  group_by(Run, Operator, Dilution) |>
  summarise(
    TU = mean(TU_ml_adj)
  ) |>
  group_by(Dilution) |>
  summarise(
    CV = DescTools::CoefVar(TU) |> scales::percent(accuracy = 0.1)
  ) |>
  ungroup() |>
  mutate(Dilution = paste0("1:", Dilution)) |>
  set_names(c("Dilution", "CV (%)")) |>
  flextable() |>
  theme_box() |>
  autofit() |>
  bold(j = 1)

```

The only samples within working range completely had CVs of 25% (1:25) and 15.1% (1:125) CVs across the 4 plates.

#### Control sample

```{r}
#| label: fig-precision-aav2
#| dev: "ragg_png"
#| fig-cap: "AAV2 TU assay precision plot (control)."

tu_data |>
  filter(
    Sample == "AAV2-GFP Internal Control"
  ) |>
  group_by(Run, Operator, Dilution) |>
  summarise(
    CV = DescTools::CoefVar(TU_ml_adj),
    GFP = mean(GFPpercent)
  ) |>
  ggplot(
    aes(x = Dilution, y = paste0("Run ", Run, " Op ", Operator), fill = CV)
  ) + 
  geom_tile() +
  theme_catapult() +
  theme(axis.title.y = element_blank()) +
  scale_fill_catapult_c(option = "B", end = 0.8, breaks = c(0, 0.1, 0.2, 0.3, 0.4), labels = scales::percent, limits = c(0, 0.45), legend_width = 16) +
  geom_label(aes(label = scales::percent(CV, accuracy = 0.1)), colour = "gold", fontface = "bold", size = 5) +
  geom_label(aes(label = paste(scales::percent(GFP, accuracy = 0.1), " GFP+")), colour = "white", size = 3.5, position = position_nudge(x = 0, y = 0.3)) +
  labs(
    x = "Dilution",
    y = "Run/Operator",
    fill = "TU/mL CV (%)"
  )
  

```

The 5.1% - 33.6% GFP+ range is consistent for the 1:125 dilution across the 4 plates.

#### Linearity sample

This is FIO - just to check that the linearity was "OK".

```{r}
#| label: fig-precision-aav2-linsample
#| dev: "ragg_png"
#| fig-cap: "AAV8 TU assay precision plot (linearity sample)."
#| fig-width: 10
#| fig-height: 5

tu_data |>
  filter(
    Sample == "AAV8-GFP-1.6X"
  ) |>
  group_by(Run, Operator, Dilution) |>
  summarise(
    CV = DescTools::CoefVar(TU_ml_adj),
    GFP = mean(GFPpercent)
  ) |>
  ggplot(
    aes(x = Dilution, y = paste0("Run ", Run, " Op ", Operator), fill = CV)
  ) + 
  geom_tile() +
  theme_catapult() +
  theme(axis.title.y = element_blank()) +
  scale_fill_catapult_c(option = "B", end = 0.8, breaks = c(0, 0.1, 0.2, 0.3, 0.4), labels = scales::percent, limits = c(0, 0.45), legend_width = 16) +
  geom_label(aes(label = scales::percent(CV, accuracy = 0.1)), colour = "gold", fontface = "bold", size = 5) +
  geom_label(aes(label = scales::percent(GFP, accuracy = 0.1)), colour = "white", size = 3.5, position = position_nudge(x = 0, y = 0.3)) +
  labs(
    x = "Dilution",
    y = "Run/Operator",
    fill = "TU/mL CV (%)"
  )

```

# Conclusions

-   **Precision**
    -   **Accuracy:** Average accuracy (`r all_acc`) is within acceptable range (50-200% recovery).
    -   **Repeatability:** All dilutions pass the <40% CV criteria.
    -   **Intermediate Precision:** 25% CV for the 1:25 sample and 15.1% CV for 1:125 sample, although all dilutions pass the <50% CV criteria.
-   **Specificity:** Noise floor at 0.4% (±0.1) GFP+, with strong positive signal in the positive controls.
-   **Linearity:** 1:16 - 1:168 (5.1% (±0.1) - 33.6% (±1.2) GFP+)
-   **LoD:** 0.6% GFP+ cells
-   **LLoQ:** 1.1% GFP+ cells
-   **ULoQ:** 33.6% GFP+ cells

Assay passes qualification with a working linear range between 5.1% - 33.6% GFP+ cells, LLoQ of 1.1% GFP+ cells, LoD of 0.6% GFP+ cells, <40% CV repeatability and 15.1% (1:125) and 25% (1:25) intermediate precision within the working range.